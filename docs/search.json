[
  {
    "objectID": "Homework 3.html",
    "href": "Homework 3.html",
    "title": "ST558 Homework 3",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nmy_data &lt;- read_csv(\"MyData.csv\")\n\n\nWhat are the benefits of using R projects?\n\n\nIt uses the same working directory and it keeps a history of your stored objects and files in your directory folder.\n\n\nWhat is git and what is github?\n\n\nGit allows you to create repositories and track the changes to a project. Github is the portal that allows people to see your work and interact with it.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibble is much neater and more concise when printing. It includes some useful information that a data frame does not. And not all operations can be done on all of the columns in a tibble. There are more restrictions for doing math on the tibble.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\n#arrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n#1.55), Species)\n\n\n#iris |&gt;\n # arrange(Species) |&gt;\n#  filter(Petal.Length &lt; 1.55) |&gt;\n#  select(starts_with(\"Petal\"), Species) \n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLonger usually has unwanted variables or unnecessary NA values removed. Wider has the potential to create missing values. Both have their benefits for different statistical goals and types of data."
  },
  {
    "objectID": "Homework 3.html#task-1",
    "href": "Homework 3.html#task-1",
    "title": "ST558 Homework 3",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nmy_data &lt;- read_csv(\"MyData.csv\")\n\n\nWhat are the benefits of using R projects?\n\n\nIt uses the same working directory and it keeps a history of your stored objects and files in your directory folder.\n\n\nWhat is git and what is github?\n\n\nGit allows you to create repositories and track the changes to a project. Github is the portal that allows people to see your work and interact with it.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibble is much neater and more concise when printing. It includes some useful information that a data frame does not. And not all operations can be done on all of the columns in a tibble. There are more restrictions for doing math on the tibble.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\n#arrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n#1.55), Species)\n\n\n#iris |&gt;\n # arrange(Species) |&gt;\n#  filter(Petal.Length &lt; 1.55) |&gt;\n#  select(starts_with(\"Petal\"), Species) \n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLonger usually has unwanted variables or unnecessary NA values removed. Wider has the potential to create missing values. Both have their benefits for different statistical goals and types of data."
  },
  {
    "objectID": "Homework 3.html#task-2",
    "href": "Homework 3.html#task-2",
    "title": "ST558 Homework 3",
    "section": "Task 2",
    "text": "Task 2\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nGlass data\n\nRead the data into R (from URL, using tidyverse functions, add column names)\n\n\n# I decided to use the col_names argument to create the column names\n\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type of Glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type of Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nprint out the tibble by calling the object name\n\n\n# viewing the column names to make sure they worked correctly\nprint(glass_data)\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe `Type of Glass`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                  1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                  1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                  1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                  1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                  1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26               1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                  1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                  1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                  1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11               1\n# ℹ 204 more rows\n\n\n\nuse the mutate() function to start a chain that overwrites the Type_of_glass variable.\n\nuse the ifelse() function to create a character string version\n\n\n\nglass_data &lt;- glass_data |&gt; \n  \n  mutate(`Type of Glass` = ifelse(`Type of Glass` == 1, \"building_windows_float_processed\", ifelse(`Type of Glass` == 2, \"building_windows_non_float_processed\", ifelse(`Type of Glass` == 3, \"vehicle_windows_float_processed\", ifelse(`Type of Glass` == 4, \"vehicle_windows_non_float_processed\", ifelse(`Type of Glass` == 5, \"containers\", ifelse(`Type of Glass` == 6, \"tableware\", ifelse(`Type of Glass` == 7, \"headlamps\", \"NA\")))))))\n  ) |&gt;\n  filter(Fe &lt; 0.2 & (`Type of Glass` == \"tableware\" | `Type of Glass` == \"headlamps\"))\n\n\n# checking the new names and filters\nprint(glass_data)\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe `Type of Glass`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware      \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware      \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware      \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware      \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware      \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware      \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware      \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware      \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware      \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps      \n# ℹ 28 more rows\n\n\n\n\nYeast Data\n\nRead the data into R (same process as above, make sure to check delimiter)\n\nadd column names\nprint out the tibble\n\n\n\n# need to use read_table() because the delimiter is a space\n\nyeast_data &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\n\n\nstart a chain that removes the seq_name and nuc columns\n\n\nyeast_data &lt;- yeast_data |&gt;\n  select(mcg:vac, class)\n\n\nprint(yeast_data)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\ncontinue chain. add columns corresponding to the mean and median of each numeric variable at each class grouping (see the across() function as we did in the dplyr video)\n\n\nyeast_data &lt;- yeast_data |&gt;\n  select(mcg:vac, class) |&gt;\n  group_by(class) |&gt;\n  mutate(across(mcg:vac, mean, .names = \"mean_{.col}\")) |&gt;\n  mutate(across(mcg:vac, median, .names = \"median_{.col}\"))"
  },
  {
    "objectID": "Homework 3.html#task-2---combining-excel-and-delimited-data",
    "href": "Homework 3.html#task-2---combining-excel-and-delimited-data",
    "title": "ST558 Homework 3",
    "section": "Task 2 - combining excel and delimited data",
    "text": "Task 2 - combining excel and delimited data\n\nreading in the white wine data\n\nlibrary(readxl)\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\")\nprint(white_wine)\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n# creating a new object with the correct variable names\nwhite_wine_variables &lt;- read_excel(\"white-wine.xlsx\", \n    sheet = \"variables\")\nprint(white_wine_variables)\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\n\n#converting the column names\ncolnames(white_wine) &lt;- c(white_wine_variables$Variables)\n\n\n# How does it look?\n\nprint(white_wine)\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n# creating the wine type variable\nwhite_wine &lt;- white_wine |&gt;\n  mutate(\n    winetype = \"white\"\n  )\n\n\n# seeing how it looks\nprint(white_wine)\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   winetype &lt;chr&gt;\n\n\n\n# importing readr, reading in the red wine data\n\nlibrary(readr)\n\n\n# making sure to address the semicolon delimiter\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# all the column types look good\nproblems(red_wine)\n\n# A tibble: 0 × 5\n# ℹ 5 variables: row &lt;int&gt;, col &lt;int&gt;, expected &lt;chr&gt;, actual &lt;chr&gt;, file &lt;chr&gt;\n\n\n\n# checking what the types are to make sure\n\nspec(red_wine)\n\ncols(\n  `fixed acidity` = col_double(),\n  `volatile acidity` = col_double(),\n  `citric acid` = col_double(),\n  `residual sugar` = col_double(),\n  chlorides = col_double(),\n  `free sulfur dioxide` = col_double(),\n  `total sulfur dioxide` = col_double(),\n  density = col_double(),\n  pH = col_double(),\n  sulphates = col_double(),\n  alcohol = col_double(),\n  quality = col_double()\n)\n\n\n\n# using the correct column names\ncolnames(red_wine) &lt;- c(white_wine_variables$Variables)\nprint(red_wine)\n\n# A tibble: 1,599 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n# creating the wine type variable for the red wine\nred_wine &lt;- red_wine |&gt;\n  mutate(\n    winetype = \"red\"\n  )\n\n\n# combine the data sets\nnew_data &lt;- bind_rows(white_wine, red_wine)\n\n\n# checking to see how it looks\nprint(new_data)\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   winetype &lt;chr&gt;\n\n\n\n# Here, I am checking to see that there is in fact red and white data in this new object\nnew_data |&gt;\n  filter(winetype == \"red\")\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   winetype &lt;chr&gt;\n\n\n\n# and also white\nnew_data |&gt;\n  filter(winetype == \"white\")\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   winetype &lt;chr&gt;\n\n\n\n#installing a library\nlibrary(dplyr)\n\n\n# creating a chain for the new combined data file \n\n#new_data |&gt;\n#  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  #arrange(desc(quality)) |&gt;\n#  select(contains(\"acid\"), alcohol, winetype, quality) |&gt;\n#  mutate(across(!alcohol), mean, .names(\"mean_alcohol\")\n#)"
  }
]